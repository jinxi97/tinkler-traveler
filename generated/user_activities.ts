// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.2
//   protoc               v5.29.3
// source: user_activities.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "./google/protobuf/struct";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "ai.tinkler.traveler_001";

/**
 * -----------------------------------------------------------------------------
 * üåç  Single user-generated event, suitable for ANY product or platform.
 * -----------------------------------------------------------------------------
 */
export interface UserActivity {
  /** -- Who / where ------------------------------------------------------------ */
  userId: string;
  /** Same value for every event in a session */
  sessionId: string;
  /** e.g. "travel-web", "erp-ios", "storefront" */
  appId: string;
  /** -- When ------------------------------------------------------------------- */
  occurredAt?:
    | Date
    | undefined;
  /** -- What ------------------------------------------------------------------- */
  eventName: string;
  /** Optional coarse grouping for quick roll-ups (e.g. BigQuery partitioning) */
  category: string;
  /**
   * -- How / why --------------------------------------------------------------
   * Key‚Äìvalue bag for anything that can live as a primitive JSON value.
   * Keep values as *strings* unless you truly need Struct‚Äôs numeric/bool.
   */
  attributes?: { [key: string]: any } | undefined;
}

function createBaseUserActivity(): UserActivity {
  return {
    userId: "",
    sessionId: "",
    appId: "",
    occurredAt: undefined,
    eventName: "",
    category: "",
    attributes: undefined,
  };
}

export const UserActivity: MessageFns<UserActivity> = {
  encode(message: UserActivity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.sessionId !== "") {
      writer.uint32(18).string(message.sessionId);
    }
    if (message.appId !== "") {
      writer.uint32(26).string(message.appId);
    }
    if (message.occurredAt !== undefined) {
      Timestamp.encode(toTimestamp(message.occurredAt), writer.uint32(34).fork()).join();
    }
    if (message.eventName !== "") {
      writer.uint32(42).string(message.eventName);
    }
    if (message.category !== "") {
      writer.uint32(50).string(message.category);
    }
    if (message.attributes !== undefined) {
      Struct.encode(Struct.wrap(message.attributes), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserActivity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserActivity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.appId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.occurredAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.eventName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.attributes = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserActivity {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
      occurredAt: isSet(object.occurredAt) ? fromJsonTimestamp(object.occurredAt) : undefined,
      eventName: isSet(object.eventName) ? globalThis.String(object.eventName) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      attributes: isObject(object.attributes) ? object.attributes : undefined,
    };
  },

  toJSON(message: UserActivity): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.occurredAt !== undefined) {
      obj.occurredAt = message.occurredAt.toISOString();
    }
    if (message.eventName !== "") {
      obj.eventName = message.eventName;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.attributes !== undefined) {
      obj.attributes = message.attributes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserActivity>, I>>(base?: I): UserActivity {
    return UserActivity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserActivity>, I>>(object: I): UserActivity {
    const message = createBaseUserActivity();
    message.userId = object.userId ?? "";
    message.sessionId = object.sessionId ?? "";
    message.appId = object.appId ?? "";
    message.occurredAt = object.occurredAt ?? undefined;
    message.eventName = object.eventName ?? "";
    message.category = object.category ?? "";
    message.attributes = object.attributes ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
